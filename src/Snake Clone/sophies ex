# Sophie Schwankl - rendering the food, snake, getting snake to move, endgame/collision detection , startscreen, trying to get the gif and fonts to work, aesthetic changes & more.  
# Liam Scott - Collision detection, creation of the classes, creation of the startscreen, infopanel, and endscreen logic
# Lucas Jackson - Creation of the Snake and Food class, did all the code in there

# Imports
import random
from Snake import *
from Food import *

GAME_WIDTH = 1000
GAME_HEIGHT = 1000
GRID_SIZE = 62.5 
 
# Instantiations
s1 = Snake(GRID_SIZE) 
f1 = Food(62.5)#GAME_WIDTH, GAME_HEIGHT, GRID_SIZE)

# Game Stuff
play = False
score = 0

def setup():
    global stage, ends, start
    size(1000,1000)
    frameRate(4)
    stage = loadImage("StageXuan.png") # This is the image for the Stage
    #start = loadImage("startscreen1Xuan.gif") # This is the image for the Startscreen
    ends = loadImage("endScreenXuan.png") # This is the image for the Endscreen
    
def draw():
    #if not play:
    #    startScreen()
   # else: 
    background(129)
    image(stage, 0, 0)
  #  print("end of draw!")
    food_img = random.choice(['appleXuanthaoT.png', 'bananaXuanthaoT.png'])
    # image(loadImage(food_img), 0, 0)
    image(loadImage("bananaXuanthaoT.png"), GRID_SIZE, GRID_SIZE, 100, 100)
    f1.draw()
    s1.update()
    s1.draw()
    if s1.x > GAME_WIDTH or s1.y > GAME_HEIGHT:
        endScreen()
    if s1.x < 0 or s1.y < 0:
        endScreen()
    infoPanel()
   
def infoPanel():
    fill(128, 0)
    noStroke()
    rectMode(CENTER)
    rect(0, 0, 2000, 125)
    textAlign(CENTER)
    textSize(30)
    fill(255)
    text("Score: ", 75, 40)
    text(score, 125, 41)
    
def startScreen(): 
    image(start, 0, 0)
    textSize(20)
    fill(255, 174, 0)
    text("Welcome to Snake Clone", 665, 540)
    text("By the Python Coding Group", 645, 570)
    text("Press the UP arrow", 675, 625)
    text("for the game to start", 665, 650)

def keyReleased():
    global key 
    #print(key)
    if key == 'w' or key == 'W':
        s1.action(key)
    elif key == 'A' or key == 'a':
        s1.action(key)
    elif key == 'S' or key == 's':
        s1.action(key)
    elif key == 'D' or key == 'd':
        s1.action(key)
    if key == CODED:
        if keyCode == UP:
            play = True
    
    s1.update()
    s1.draw()

def endScreen():
    image(ends, 0, 0)
    noLoop()
    
def intersectWall(width, height):
    d = dist(width, height, s1.x, s1.y)
    if (d < 62.5):
        endscreen()
            
def intersectFood():
    d = dist(f1.x, f1.y, s1.x, s1.y)
    if(s1.x and s1.y == f1.x and f1.y):
        score += 1
        move.f1

  #  if(d < 62.5):
   #    score += 1
        
----------------------------------------------------------------
class Food(object):
    
# Intergers
    x = 0
    y = 0
    diam = 0

# Constructor        
    def __init__(self, size):
        self.x = 100
        self.y = 100
        
            
        #food_img = random.choice(['appleXuanthaoT.png', 'bananaXuanthaoT.png'])
        #image(loadImage(food_img), 0, 0)
        
    def draw(self): # Display Method for Food
        #img = random.choice(["appleXuanthaoT.png", "bananaXuanthaoT.png"])
        img = "appleXuanthaoT.png"
        #image(loadImage(img), GRID_SIZE, GRID_SIZE, 100, 100)
        
    def move(self): # Move Method for Food
        self.x
        self.y
        for i in range(x, y):
            r = random(x, y)
            r.display()
            
    def intersect(Snake, snake):
        s = dist(x, y, snake.x, snake.y)
        if (s < GRID_SIZE):
            return True
        else: 
            return False
      -------------------------------------------------
      #used some code by MagicHatJo from their github repository 
class Snake(object):
    
    # Intergers
    global xpos
    global ypos
  
    # Constructor
    def __init__(self, size):
        self.x = 3 * size
        self.y = 3 * size
        self.vx = 1
        self.vy = 0
        self.size = size
    
        self.body = [
        (self.x - size, self.y),
        (self.x - size * 2, self.y)
        ]
        
    def action(self, dir): # Move Method for Snake
        if key == "w" and self.vy != 1:
            self.vx = 0
            self.vy = -1
        if key == "a" and self.vx != 1:
            self.vx = -1
            self.vy = 0
        if key == "s" and self.vy != -1:
            self.vx = 0
            self.vy = 1
        if key == "d" and self.vx != -1:
            self.vx = 1
            self.vy = 0
            
    def update(self):
        self.body.pop(0)
        self.body.append((self.x, self.y))
            
        self.x += self.vx * self.size
        self.y += self.vy * self.size   
             
    def grow(self):
        self.body.insert(0, self.body[0])

    def draw(self): # Display Method for Snake
        fill(253, 208, 63)
        rect(self.x, self.y, self.size, self.size, 10)
        for part in self.body:
            rect(part[0], part[1], self.size, self.size, 10) 

    def intersect(Food, food):
        d = dist(x, y, food.x, food.y)
        if (d<GRID_SIZE):
            return True
        else: 
            return False
